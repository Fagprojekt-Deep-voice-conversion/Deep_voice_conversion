baseline = "WORLD"
}
# print(name)
list_of_reals <- list.files(paste("www", "Baseline", baseline, "persons", name, sep = "/"))
# print(list_of_reals)
real <- sample(list_of_reals, 1)
path_to_fake1 <- paste(model, task, subtask, fakes[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, fakes[2], sep= "/")
path_to_real <- paste("Baseline", baseline, "persons", name, real, sep = "/" )
# print(c(path_to_fake1, path_to_real, path_to_fake2, name))
return(c(path_to_fake1, path_to_real, path_to_fake2, from_and_to))
}
else if  (q == "similarity" & model == "Baseline"){
names <- sample(list.files(paste("www", model, task, subtask, sep = "/")),2, replace = F)
list_of_reals1 <- list.files(paste("www", model, task, subtask, names[1], sep = "/"))
list_of_reals2 <- list.files(paste("www", model, task, subtask, names[2], sep = "/"))
person1 <- sample(list_of_reals1, 2, F)
person2 <- sample(list_of_reals2, 1, F)
path_to_fake1 <- paste(model, task, subtask, names[1], person1[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, names[2], person2, sep= "/")
path_to_real <- paste(model, task, subtask, names[1], person1[2], sep = "/" )
# print(c(path_to_fake1, path_to_real, path_to_fake2, names[2]))
return(c(path_to_fake1, path_to_real, path_to_fake2, names[2]))
}
}
get_wavs_experiment("StarGAN", "English", "Male_Female", "similarity", 1)
get_wavs_experiment <- function(model, task, subtask, q, seed){
set.seed(seed)
if (q == "real_fake"){
list_of_fakes <- list.files(sprintf("www/%s/%s/%s", model, task, subtask))
fake <- sample(list_of_fakes, 1, F)
t <- task
s <- strsplit(subtask[1], "_")[[1]]
baseline_category <- paste(s[2],t, sep = "_")
if (model == "AutoVC"){
baseline = "WaveRNN"
}
else if (model == "StarGAN"){
baseline = "WORLD"
}
list_of_reals <- list.files(paste("www", "Baseline", baseline, baseline_category, sep = "/"))
name <- sample(list_of_reals, 1)
real<-sample(list.files(paste("www", "Baseline", baseline, baseline_category, name, sep = "/")),1)
path_to_fake <- paste(model, task, subtask, fake, sep= "/")
path_to_real <- paste("Baseline", baseline, baseline_category, name, real, sep = "/")
# print(c(path_to_real, path_to_fake))
return(c(path_to_real, path_to_fake))
}
else if (q == "similarity" & model != "Baseline"){
list_of_fakes <- list.files(paste("www", model, task, subtask, sep = "/"))
fakes <- sample(list_of_fakes, 2, F)
if (model == "AutoVC"){
split <- strsplit(str_remove(fakes[1], ".wav"), "_")[[1]]
print(split)
from_and_to <- paste(split[1], split[length(split)], sep = "_")
}
else if (model == "StarGAN"){
split <- strsplit(str_remove(fakes[1], ".wav"), "-")[[1]]
a <- strsplit(split[1], "_")[[1]]
b <- split[length(split)]
from_and_to <- paste(a, b, sep = "_")
print(a)
print(b)
}
name <- split[length(split)]
print(from_and_to)
if (model == "AutoVC"){
baseline = "WaveRNN"
}
else if (model == "StarGAN"){
baseline = "WORLD"
}
# print(name)
list_of_reals <- list.files(paste("www", "Baseline", baseline, "persons", name, sep = "/"))
# print(list_of_reals)
real <- sample(list_of_reals, 1)
path_to_fake1 <- paste(model, task, subtask, fakes[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, fakes[2], sep= "/")
path_to_real <- paste("Baseline", baseline, "persons", name, real, sep = "/" )
# print(c(path_to_fake1, path_to_real, path_to_fake2, name))
return(c(path_to_fake1, path_to_real, path_to_fake2, from_and_to))
}
else if  (q == "similarity" & model == "Baseline"){
names <- sample(list.files(paste("www", model, task, subtask, sep = "/")),2, replace = F)
list_of_reals1 <- list.files(paste("www", model, task, subtask, names[1], sep = "/"))
list_of_reals2 <- list.files(paste("www", model, task, subtask, names[2], sep = "/"))
person1 <- sample(list_of_reals1, 2, F)
person2 <- sample(list_of_reals2, 1, F)
path_to_fake1 <- paste(model, task, subtask, names[1], person1[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, names[2], person2, sep= "/")
path_to_real <- paste(model, task, subtask, names[1], person1[2], sep = "/" )
# print(c(path_to_fake1, path_to_real, path_to_fake2, names[2]))
return(c(path_to_fake1, path_to_real, path_to_fake2, names[2]))
}
}
get_wavs_experiment("StarGAN", "English", "Male_Female", "similarity", 1)
get_wavs_experiment <- function(model, task, subtask, q, seed){
set.seed(seed)
if (q == "real_fake"){
list_of_fakes <- list.files(sprintf("www/%s/%s/%s", model, task, subtask))
fake <- sample(list_of_fakes, 1, F)
t <- task
s <- strsplit(subtask[1], "_")[[1]]
baseline_category <- paste(s[2],t, sep = "_")
if (model == "AutoVC"){
baseline = "WaveRNN"
}
else if (model == "StarGAN"){
baseline = "WORLD"
}
list_of_reals <- list.files(paste("www", "Baseline", baseline, baseline_category, sep = "/"))
name <- sample(list_of_reals, 1)
real<-sample(list.files(paste("www", "Baseline", baseline, baseline_category, name, sep = "/")),1)
path_to_fake <- paste(model, task, subtask, fake, sep= "/")
path_to_real <- paste("Baseline", baseline, baseline_category, name, real, sep = "/")
# print(c(path_to_real, path_to_fake))
return(c(path_to_real, path_to_fake))
}
else if (q == "similarity" & model != "Baseline"){
list_of_fakes <- list.files(paste("www", model, task, subtask, sep = "/"))
fakes <- sample(list_of_fakes, 2, F)
if (model == "AutoVC"){
split <- strsplit(str_remove(fakes[1], ".wav"), "_")[[1]]
print(split)
from_and_to <- paste(split[1], split[length(split)], sep = "_")
}
else if (model == "StarGAN"){
split <- strsplit(str_remove(fakes[1], ".wav"), "-")[[1]]
a <- strsplit(split[1], "_")[[1]]
b <- split[length(split)]
from_and_to <- paste(a[1], b, sep = "_")
print(a)
print(b)
}
name <- split[length(split)]
print(from_and_to)
if (model == "AutoVC"){
baseline = "WaveRNN"
}
else if (model == "StarGAN"){
baseline = "WORLD"
}
# print(name)
list_of_reals <- list.files(paste("www", "Baseline", baseline, "persons", name, sep = "/"))
# print(list_of_reals)
real <- sample(list_of_reals, 1)
path_to_fake1 <- paste(model, task, subtask, fakes[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, fakes[2], sep= "/")
path_to_real <- paste("Baseline", baseline, "persons", name, real, sep = "/" )
# print(c(path_to_fake1, path_to_real, path_to_fake2, name))
return(c(path_to_fake1, path_to_real, path_to_fake2, from_and_to))
}
else if  (q == "similarity" & model == "Baseline"){
names <- sample(list.files(paste("www", model, task, subtask, sep = "/")),2, replace = F)
list_of_reals1 <- list.files(paste("www", model, task, subtask, names[1], sep = "/"))
list_of_reals2 <- list.files(paste("www", model, task, subtask, names[2], sep = "/"))
person1 <- sample(list_of_reals1, 2, F)
person2 <- sample(list_of_reals2, 1, F)
path_to_fake1 <- paste(model, task, subtask, names[1], person1[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, names[2], person2, sep= "/")
path_to_real <- paste(model, task, subtask, names[1], person1[2], sep = "/" )
# print(c(path_to_fake1, path_to_real, path_to_fake2, names[2]))
return(c(path_to_fake1, path_to_real, path_to_fake2, names[2]))
}
}
get_wavs_experiment("StarGAN", "English", "Male_Female", "similarity", 1)
runApp()
source('C:/Users/peter/OneDrive/Dokumenter/DTU/4. Semester/02466 - Fagprojekt KID/Deep_voice_conversion/Experiment/Survey-app/voice-conversion-survey/Combination.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
person_score_conversion_A = matrix(NA, nrow = nrow(X), ncol = length(persons))
person_score_conversion_A
person_score_conversion_S
X <- combination()
person_score_conversion_A = matrix(NA, nrow = nrow(X), ncol = length(persons))
person_score_conversion_A
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tags$br
runApp()
runApp()
runApp()
runApp()
runApp()
Sys.time()
Sys.time()
runApp()
runApp()
Sys.time()
runApp()
Sys.time()
runApp()
runApp()
runApp()
source('C:/Users/peter/OneDrive/Dokumenter/DTU/4. Semester/02466 - Fagprojekt KID/Deep_voice_conversion/Experiment/Survey-app/voice-conversion-survey/Statistics.R', echo=TRUE)
read_sheet(ss, sheet = "Similarity")
ss = "https://docs.google.com/spreadsheets/d/1Y2Hu04dY-chxSPdVgcUefXSTs6zvG6lkzAFlWhICPJA/edit#gid=0"
read_sheet(ss, sheet = "Similarity")
X <- read_sheet(ss, sheet = "Similarity")
X
X$ADMM
mean(X$ADMM)
as.integer(X$ADMM)
mean(as.integer(X$ADMM))
mean(as.integer(X$ADFF))
Q <- read_sheet(ss, sheet = "Quality")
Q
mean(as.integer(S$ADMM))
S <- read_sheet(ss, sheet = "Similarity")
mean(as.integer(S$ADMM))
mean(as.integer(S$SDMM))
S2 <- S[, c("Time", "Zone", "Age", "Gender")]
S2
S2 <- S[, !c("Time", "Zone", "Age", "Gender")]
S2
S2 <- S[, c("Time", "Zone", "Age", "Gender"), drop = F]
S2
S2 <- subset(S, -c("Time", "Zone", "Age", "Gender"))
S2 <- subset(S, select = -c("Time", "Zone", "Age", "Gender"))
S
S[, !"Time"]
S[, !c("Time")]
S[, !c("Time", "Zone")]
S
library(ggplot2)
mean(S$ADMM)
transform(S, ADMM = as.numeric)
transform(S, "ADMM" = as.numeric("ADDM"))
S$ADMM <- as.numeri(S$ADMM)
S$ADMM <- as.numeric(S$ADMM)
S$ADMM
S
S$ADMM <- as.numeric(S)
S<- as.numeric(S)
S <- read_sheet(ss, sheet = "Similarity")
S<- as.numeric(S)
S
S
barplot(as.numeric(S$ADMM))
barplot(mean(as.numeric(S$ADMM)))
barplot(c(mean(as.numeric(S$ADMM), mean(as.numeric(S$SDMM))))
barplot(c(mean(as.numeric(S$ADMM), mean(as.numeric(S$SDMM)))))
barplot(c(mean(as.numeric(S$ADMM)), mean(as.numeric(S$SDMM)) ))
barplot(c(mean(as.numeric(S$ADMM)), mean(as.numeric(S$SDMM)) ))
subset(S)
subset(S, -c(1,2,3,4))
S[,-c(1,2,3,4)]
S1 <- S[,-c(1,2,3,4)]
as.numeric(S1)
as.numeric(S1)
S1$ADMM
S1$AEMM
S1$AEFM
as.numeric(S1$AEFM)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
data <- S[,-c(1,2,3,4)]
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
data[ , c(1:2)] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
i <- c(1:2)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
data
i <- c(1:28)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
data
colMean(data)
colMeans(data)
barplot(colMeans(data))
MOS <- colMeans(data)
MOS
MOS[c(1:8)]
MOS[c(1:9)]
MOS[c(1:8)]
MOS[c(10:18)]
MOS[c(11:18)]
MOS[c(1:8)]
MOS[c(11:18)]
X <- table(MOS[c(1:8)], MOS[c(11:18)])
X
barplot(X)
X <- table(MOS[c(1:8)], MOS[c(11:18)], beside = T)
X <- table(MOS[c(1:8)], MOS[c(11:18)])
barplot(X, beside = T)
X <- table(t(MOS[c(1:8)]), t(MOS[c(11:18)]))
barplot(X, beside = T)
X
matrix(c(MOS[c(1:8)], MOS[c(11:18)]))
matrix(MOS[c(1:8)], MOS[c(11:18)])
cbind(MOS[c(1:8)], MOS[c(11:18)])
X <- cbind(MOS[c(1:8)], MOS[c(11:18)])
barplot(X, besides = T)
barplot(X, beside = T)
X <- t(cbind(MOS[c(1:8)], MOS[c(11:18)]))
barplot(X, beside = T)
barplot(X, beside = T, col= c("DMM"))
legend("topleft", c(1:18))
legend("topleft", c(1:18))
barplot(X, beside = T)
legend("topleft", c(1:18))
X <- t(cbind(MOS[c(1:8)], MOS[c(11:18)]))
X
X.names
X.col
X.cols
colnames(X)
colnames(X) <- c("DMM", "DFF", "DMF", "DFM", "EMM", "EFF", "EMF", "EFM")
barplot(X, beside = T)
legend("topleft", c(1:18))
legend("topleft")
barplot(X, beside = T, legend.text = c("HEj"))
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"))
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = )
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("blue"))
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"))
side = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"))
legend("topleft")
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"), main = "Similarity")
data <- Q[,-c(1,2,3,4)]
i <- c(1:28)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
MOS <- colMeans(data)
X <- t(cbind(MOS[c(1:8)], MOS[c(11:18)]))
colnames(X) <- c("DMM", "DFF", "DMF", "DFM", "EMM", "EFF", "EMF", "EFM")
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"), main = "Similarity")
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"), main = "Quality")
data <- S[,-c(1,2,3,4)]
i <- c(1:28)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
MOS <- colMeans(data)
X <- t(cbind(MOS[c(1:8)], MOS[c(11:18)]))
colnames(X) <- c("DMM", "DFF", "DMF", "DFM", "EMM", "EFF", "EMF", "EFM")
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"), main = "Similarity")
mean(c(0,1,2,3,4,5))
data <- Q[,-c(1,2,3,4)]
i <- c(1:28)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
MOS <- colMeans(data)
X <- t(cbind(MOS[c(1:8)], MOS[c(11:18)]))
colnames(X) <- c("DMM", "DFF", "DMF", "DFM", "EMM", "EFF", "EMF", "EFM")
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"), main = "Quality")
Fool <- read_sheet(ss, sheet = "Fakeness")
Fool
data <- Fool[,-c(1,2,3,4)]
i <- c(1:28)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
MOS <- colMeans(data)
X <- t(cbind(MOS[c(1:8)], MOS[c(11:18)]))
colnames(X) <- c("DMM", "DFF", "DMF", "DFM", "EMM", "EFF", "EMF", "EFM")
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"), main = "Similarity")
data <- Fool[,-c(1,2,3,4)]
i <- c(1:28)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
data <- Fool[,-c(1,2,3,4)]
data
data <- Fool[,-c(1,2,3,4)]
data
i <- c(1:16)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
MOS <- colMeans(data)
X <- t(cbind(MOS[c(1:8)], MOS[c(11:18)]))
colnames(X) <- c("DMM", "DFF", "DMF", "DFM", "EMM", "EFF", "EMF", "EFM")
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"), main = "Similarity")
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"), main = "Fool Score")
data <- Fool[,-c(1,2,3,4)]
data
i <- c(1:16)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
MOS <- 1-colMeans(data)
X <- t(cbind(MOS[c(1:8)], MOS[c(11:18)]))
colnames(X) <- c("DMM", "DFF", "DMF", "DFM", "EMM", "EFF", "EMF", "EFM")
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"), main = "Fool Score")
source('C:/Users/peter/OneDrive/Dokumenter/DTU/4. Semester/02466 - Fagprojekt KID/Deep_voice_conversion/Experiment/Survey-app/voice-conversion-survey/Statistics.R', echo=TRUE)
data <- S[,-c(1,2,3,4)]
i <- c(1:28)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
MOS <- colMeans(data)
X <- t(cbind(MOS[c(1:8)], MOS[c(11:18)]))
colnames(X) <- c("DMM", "DFF", "DMF", "DFM", "EMM", "EFF", "EMF", "EFM")
barpl
hist(X)
hist(data$ADMM)
P <- read_sheet(ss, sheet = "Persons")
data <- P[,-c(1,2,3,4)]
data
i <- c(1:16)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
data
MOS <- colMeans(data)
X <- t(cbind(MOS[c(1:8)], MOS[c(9:16)]))
colnames(X) <- c("DMM", "DFF", "DMF", "DFM", "EMM", "EFF", "EMF", "EFM")
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"), main = "Fool Score")
X <- t(cbind(MOS[c(1:8)], MOS[c(9:16)]))
X
MOS <- colMeans(data, na.rm = T)
X <- t(cbind(MOS[c(1:8)], MOS[c(9:16)]))
X
colnames(X) <- c("Obama", "Trump", "Hillary", "Michelle", "Mette", "Helle", "Lars", "Anders")
barplot(X, beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"), main = "Fool Score")
barplot(X, beside = T, legend.text = c("WaveRNN", "WORLD"), col = c("skyblue", "orange"), main = "Fool Score")
barplot(X, beside = T, legend.text = c("WaveRNN", "WORLD"), col = c("skyblue", "orange"), main = "Baseline Sound Quality")
barplot(X, beside = T, legend.text = c("WaveRNN", "WORLD"), col = c("skyblue", "orange"), main = "Baseline Sound Quality / Naturalness")
PAV <- read_sheet(ss, sheet = "ConversionsAV")
#### BASELINE SOUND QUALITY ####
data <- PAV[,-c(1,2,3,4)]
data
i <- c(1:24)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
data
MOS <- colMeans(data, na.rm = T)
MOS
matrix(MOS, nrow = 8, ncol = 3)
colnames(X) <- c("Obama", "Trump", "Hillary", "Michelle", "Mette", "Helle", "Lars", "Anders")
barplot(X, beside = T, legend.text = c("WaveRNN", "WORLD"), col = c("skyblue", "orange"), main = "Baseline Sound Quality / Naturalness")
X <- matrix(MOS, nrow = 8, ncol = 3)
colnames(X) <- c("Obama", "Trump", "Hillary", "Michelle", "Mette", "Helle", "Lars", "Anders")
X <- t(matrix(MOS, nrow = 8, ncol = 3))
MOS <- colMeans(data, na.rm = T)
MOS
X <- t(matrix(MOS, nrow = 8, ncol = 3))
X
X <- matrix(MOS, nrow = 8, ncol = 3)
X
X <- matrix(t(MOS), nrow = 8, ncol = 3)
X
MOS <- colMeans(data, na.rm = T)
MOS
MOS[1]
MOS[2]
X <- matrix(t(MOS), nrow = 3, ncol = 8)
X
colnames(X) <- c("Obama", "Trump", "Hillary", "Michelle", "Mette", "Helle", "Lars", "Anders")
barplot(X, beside = T, legend.text = c("WaveRNN", "WORLD"), col = c("skyblue", "orange"), main = "Baseline Sound Quality / Naturalness")
barplot(X, beside = T, legend.text = c("WaveRNN", "WORLD"), col = c("skyblue", "orange", "lightgreen"), main = "Baseline Sound Quality / Naturalness")
barplot(colMeans(X), beside = T, legend.text = c("WaveRNN", "WORLD"), col = c("skyblue", "orange", "lightgreen"), main = "Conversion AutoVC Sound Quality / Naturalness")
barplot(colMeans(X), beside = T, legend.text = c("WaveRNN", "WORLD"), col = c("skyblue", "orange"), main = "Conversion AutoVC Sound Quality / Naturalness")
PSG <- read_sheet(ss, sheet = "ConversionsSG")
data <- PSG[,-c(1,2,3,4)]
data
i <- c(1:24)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
data
MOS <- colMeans(data, na.rm = T)
X <- matrix(t(MOS), nrow = 3, ncol = 8)
X
# X <- t(cbind(MOS[c(1:8)], MOS[c(9:16)]))
colnames(X) <- c("Obama", "Trump", "Hillary", "Michelle", "Mette", "Helle", "Lars", "Anders")
barplot(colMeans(X), beside = T, legend.text = c("WaveRNN", "WORLD"), col = c("skyblue", "orange"), main = "Conversion AutoVC Sound Quality / Naturalness")
data <- PAV[,-c(1,2,3,4)]
data
i <- c(1:24)
data[ , i] <- apply(data[ , i], 2,            # Specify own function within apply
function(x) as.numeric(as.character(x)))
data
MOS <- colMeans(data, na.rm = T)
Y <- matrix(t(MOS), nrow = 3, ncol = 8)
X
# X <- t(cbind(MOS[c(1:8)], MOS[c(9:16)]))
colnames(Y) <- c("Obama", "Trump", "Hillary", "Michelle", "Mette", "Helle", "Lars", "Anders")
barplot(colMean
barplot(cbind(colMeans(Y), colMeans(X)), beside = T, legend.text = c("WaveRNN", "WORLD"), col = c("skyblue", "orange"), main = "Conversion AutoVC Sound Quality / Naturalness")
barplot(cbind(colMeans(Y), colMeans(X)), beside = T, legend.text = c("WaveRNN", "WORLD"), col = c("skyblue", "orange"), main = "Conversion AutoVC Sound Quality / Naturalness")
barplot(rbind(colMeans(Y), colMeans(X)), beside = T, legend.text = c("WaveRNN", "WORLD"), col = c("skyblue", "orange"), main = "Conversion AutoVC Sound Quality / Naturalness")
barplot(colMeans(X), beside = T, col = c("skyblue", "orange"), main = "Conversion AutoVC Sound Quality / Naturalness")
barplot(rbind(colMeans(Y), colMeans(X)), beside = T, legend.text = c("WaveRNN", "WORLD"), col = c("skyblue", "orange"), main = "Conversion AutoVC Sound Quality / Naturalness")
barplot(rbind(colMeans(Y), colMeans(X)), beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"), main = "Conversion AutoVC Sound Quality / Naturalness")
barplot(rbind(colMeans(Y), colMeans(X)), beside = T, legend.text = c("AutoVC", "StarGAN"), col = c("skyblue", "orange"), main = "Mean Conversion Sound Quality / Naturalness")

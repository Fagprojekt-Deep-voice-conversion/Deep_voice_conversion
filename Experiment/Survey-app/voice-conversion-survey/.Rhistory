list_of_reals <- list.files(sprintf('www/Baseline/Baseline/%s', baseline_category))
name <- sample(list_of_reals, 1)
real<-sample(list.files(paste("www", "Baseline", "Baseline", baseline_category, name, sep = "/")),1)
path_to_fake <- paste(model, task, subtask, fake, sep= "/")
path_to_real <- paste("Baseline", "Baseline", baseline_category, name, real, sep = "/")
return(c(path_to_real, path_to_fake))
}
else if (q == "similarity" & model != "Baseline"){
list_of_fakes <- list.files(sprintf("www/%s/%s/%s", model, task, subtask))
fakes <- sample(list_of_fakes, 2, F)
split <- strsplit(str_remove(fakes[1], ".wav"), "_")[[1]]
name <- split[length(split)]
print(name)
list_of_reals <- list.files(sprintf("www/persons/%s", name))
real <- sample(list_of_reals, 1)
path_to_fake1 <- paste(model, task, subtask, fakes[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, fakes[2], sep= "/")
path_to_real <- paste("persons", name, real, sep = "/" )
return(c(path_to_fake1, path_to_real, path_to_fake2))
}
else if  (q == "similarity" & model == "Baseline"){
names <- sample(list.files(paste("www", model, task, subtask, sep = "/")),2, replace = F)
list_of_reals1 <- list.files(paste("www", model, task, subtask, names[1], sep = "/"))
list_of_reals2 <- list.files(paste("www", model, task, subtask, names[2], sep = "/"))
person1 <- sample(list_of_reals1, 2, F)
person2 <- sample(list_of_reals2, 1, F)
path_to_fake1 <- paste(model, task, subtask, names[1], person1[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, names[2], person2, sep= "/")
path_to_real <- paste(model, task, subtask, names[1], person1[2], sep = "/" )
# print(c(path_to_fake1, path_to_real, path_to_fake2))
return(c(path_to_fake1, path_to_real, path_to_fake2))
}
}
get_wavs_experiment("AutoVC", "English_English", "Male_Male", "similarity", 22222)
source("Combination.R")
models[X[SamplesB,][input$Click.Counter- midways -2,][1]],
categories[X[SamplesB,][input$Click.Counter- midways -2,][2]],
subcategories[X[SamplesB,][input$Click.Counter- midways -2,][3]],
"similarity", input$Click.Counter)[4]
X <- combination()
SamplesB <- sample(nrow(X), nrow(X), replace = F)
name <- get_wavs_experiment(
models[X[SamplesB,][input$Click.Counter- midways -2,][1]],
categories[X[SamplesB,][input$Click.Counter- midways -2,][2]],
subcategories[X[SamplesB,][input$Click.Counter- midways -2,][3]],
"similarity", input$Click.Counter)[4]
shiny::runApp()
runApp()
A = list("A" = 2, "B"= 3)
A["A"] += 1
A["A"] = A["A"] + 1
A = list("A" = 2, "B"= 3)
A["A"] = A["A"] + 1
A["A"]
A["A"][1]
A["A"][1]+1
A["A"][[1]]
A["A"][[1]] + 1
A["A"][[1]] = A["A"][[1]] + 1
A["A"]
5 + 1/2(3-5)
5 + 1/2(3-5)
5 + 1/2*(3-5)
persons = list("obama" = 0, "trump"= 0, "hillary"= 0, "michelle"= 0, "mette"= 0, "helle"= 0, "lars"= 0, "anders" = 0)
name = "obama"
input = 3
if (persons[name][[1]] == NaN){
persons[name][[1]] = input
}
persons[name][[1]]
persons = list("obama" = NaN, "trump"= 0, "hillary"= 0, "michelle"= 0, "mette"= 0, "helle"= 0, "lars"= 0, "anders" = 0)
persons
persons[name][[1]]
NaN == NaN
if (persons[name][[1]] = NaN){
persons[name][[1]] = input
}
if (persons[name][[1]] = NaN){
persons[name][[1]] = input
}
if (persons[name][[1]] == NaN){
persons[name][[1]] = input
}
if (persons[name][[1]] == NULL){
persons[name][[1]] = input
}
if (persons[name][[1]] == NULL){
persons[name][[1]] = input
}
if (persons[name][[1]] == NA){
persons[name][[1]] = input
}
if (persons[name][[1]] == NA){
persons[name][[1]] = input
}
if (persons[name][[1]] = NA){
persons[name][[1]] = input
}
if (persons[name][[1]] == 2){
persons[name][[1]] = input
}
if (persons[name][[1]] == ""){
persons[name][[1]] = input
}
if (persons[name][[1]] == ""){
persons[name][[1]] = input
}
persons = list("obama" = "", "trump"= 0, "hillary"= 0, "michelle"= 0, "mette"= 0, "helle"= 0, "lars"= 0, "anders" = 0)
name = "obama"
input = 3
if (persons[name][[1]] == ""){
persons[name][[1]] = input
}
persons
data.frame(c("", 2, 3, 4))
X = data.frame(c("", 2, 3, 4))
X
X = data.frame(c( 2, 3, 4))
X
X = data.frame(t(c( 2, 3, 4)))
X
X = data.frame(t(c( "", 2, 3, 4)))
X
X[1]
persons = list("obama", "trump"= 0, "hillary"= 0, "michelle"= 0, "mette"= 0, "helle"= 0, "lars"= 0, "anders" = 0)
persons
if (is.nan(persons[name][[1]])){
persons[name][[1]] = input
}
is.nan(NaN)
persons = list("obama" = NaN, "trump"= 0, "hillary"= 0, "michelle"= 0, "mette"= 0, "helle"= 0, "lars"= 0, "anders" = 0)
name = "obama"
input = 3
if (is.nan(persons[name][[1]])){
persons[name][[1]] = input
}
else{
n = 2
persons[name][[1]] = persons[name][[1]] + 1/n * (input - persons[name][[1]])
}
runApp()
runApp()
runApp()
runApp()
A <- matrix(2,2)
A
A <- matrix(, nrow = 16, ncol = 8)
A
A <- matrix(2, nrow = 16, ncol = 8)
A
mean(A,0)
mean(A)
mean(A, axis = 1)
mean(A, 1)
rowMeans(A)
persons = list("obama" = 1, "trump"= 2, "hillary"= 3, "michelle"= 4, "mette"= 5, "helle"= 6, "lars"= 7, "anders" = 8)
X <- combination()
avg_score_persons = matrix(, nrow = nrow(X), ncol = length(persons))
avg_score_persons
avg_score_persons[2,2] = 3
avg_score_persons
avg_score_persons
avg_score_persons[3,2] = 3
avg_score_persons
runApp()
runApp()
runApp()
runApp()
A = matrix(, nrow = 10, ncol = 7)
A[1,1] = 3
A[2,1] = 3
A[1,2] = 4
A[2,2] = 2
A
rowMeans(A, na.rm  = T)
cbind(2,2,rowMeans(A, na.rm  = T))
c(2,2,rowMeans(A, na.rm  = T))
data.frame(c(2,2,rowMeans(A, na.rm  = T)))
data.frame(t(c(2,2,rowMeans(A, na.rm  = T))))
runApp()
avg_score_persons = matrix(, nrow = nrow(X), ncol = length(persons))
avg_score_persons
rowMeans(avg_score_persons, na.rm = T)
colMeans(avg_score_persons, na.rm = T)
runApp()
runApp()
runApp()
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 22222)
get_wavs_experiment <- function(model, task, subtask, q, seed){
set.seed(seed)
if (q == "real_fake"){
list_of_fakes <- list.files(sprintf("www/%s/%s/%s", model, task, subtask))
fake <- sample(list_of_fakes, 1, F)
t <- strsplit(task[1], "_")[[1]]
s <- strsplit(subtask[1], "_")[[1]]
baseline_category <- paste(s[2],t[2], sep = "_")
list_of_reals <- list.files(sprintf('www/Baseline/Baseline/%s', baseline_category))
name <- sample(list_of_reals, 1)
real<-sample(list.files(paste("www", "Baseline", "Baseline", baseline_category, name, sep = "/")),1)
path_to_fake <- paste(model, task, subtask, fake, sep= "/")
path_to_real <- paste("Baseline", "Baseline", baseline_category, name, real, sep = "/")
return(c(path_to_real, path_to_fake))
}
else if (q == "similarity" & model != "Baseline"){
list_of_fakes <- list.files(sprintf("www/%s/%s/%s", model, task, subtask))
fakes <- sample(list_of_fakes, 2, F)
split <- strsplit(str_remove(fakes[1], ".wav"), "_")[[1]]
name <- split[length(split)]
list_of_reals <- list.files(sprintf("www/persons/%s", name))
real <- sample(list_of_reals, 1)
path_to_fake1 <- paste(model, task, subtask, fakes[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, fakes[2], sep= "/")
path_to_real <- paste("persons", name, real, sep = "/" )
return(c(path_to_fake1, path_to_real, path_to_fake2, name))
}
else if  (q == "similarity" & model == "Baseline"){
names <- sample(list.files(paste("www", model, task, subtask, sep = "/")),2, replace = F)
list_of_reals1 <- list.files(paste("www", model, task, subtask, names[1], sep = "/"))
list_of_reals2 <- list.files(paste("www", model, task, subtask, names[2], sep = "/"))
person1 <- sample(list_of_reals1, 2, F)
person2 <- sample(list_of_reals2, 1, F)
path_to_fake1 <- paste(model, task, subtask, names[1], person1[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, names[2], person2, sep= "/")
path_to_real <- paste(model, task, subtask, names[1], person1[2], sep = "/" )
# print(c(path_to_fake1, path_to_real, path_to_fake2))
return(c(path_to_fake1, path_to_real, path_to_fake2))
}
}
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 22222)
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 22222)
get_wavs_experiment <- function(model, task, subtask, q, seed){
set.seed(seed)
if (q == "real_fake"){
list_of_fakes <- list.files(sprintf("www/%s/%s/%s", model, task, subtask))
fake <- sample(list_of_fakes, 1, F)
t <- strsplit(task[1], "_")[[1]]
s <- strsplit(subtask[1], "_")[[1]]
baseline_category <- paste(s[2],t[2], sep = "_")
list_of_reals <- list.files(sprintf('www/Baseline/Baseline/%s', baseline_category))
name <- sample(list_of_reals, 1)
real<-sample(list.files(paste("www", "Baseline", "Baseline", baseline_category, name, sep = "/")),1)
path_to_fake <- paste(model, task, subtask, fake, sep= "/")
path_to_real <- paste("Baseline", "Baseline", baseline_category, name, real, sep = "/")
return(c(path_to_real, path_to_fake))
}
else if (q == "similarity" & model != "Baseline"){
list_of_fakes <- list.files(sprintf("www/%s/%s/%s", model, task, subtask))
fakes <- sample(list_of_fakes, 2, F)
split <- strsplit(str_remove(fakes[1], ".wav"), "_")[[1]]
name <- split[length(split)]
list_of_reals <- list.files(sprintf("www/persons/%s", name))
real <- sample(list_of_reals, 1)
print(name)
path_to_fake1 <- paste(model, task, subtask, fakes[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, fakes[2], sep= "/")
path_to_real <- paste("persons", name, real, sep = "/" )
return(c(path_to_fake1, path_to_real, path_to_fake2, name))
}
else if  (q == "similarity" & model == "Baseline"){
names <- sample(list.files(paste("www", model, task, subtask, sep = "/")),2, replace = F)
list_of_reals1 <- list.files(paste("www", model, task, subtask, names[1], sep = "/"))
list_of_reals2 <- list.files(paste("www", model, task, subtask, names[2], sep = "/"))
person1 <- sample(list_of_reals1, 2, F)
person2 <- sample(list_of_reals2, 1, F)
path_to_fake1 <- paste(model, task, subtask, names[1], person1[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, names[2], person2, sep= "/")
path_to_real <- paste(model, task, subtask, names[1], person1[2], sep = "/" )
# print(c(path_to_fake1, path_to_real, path_to_fake2))
return(c(path_to_fake1, path_to_real, path_to_fake2))
}
}
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 22222)
runApp()
runApp()
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 22222)
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 22222)
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 22222)
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 22222)
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 22222)
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 1)
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 17)
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 18)
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 19)
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 20)
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 21)
get_wavs_experiment("AutoVC", "English_English", "Female_Female", "similarity", 22)
source("Combination.R")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
matrix(, nrow = 20)
runApp()
runApp()
person_score_conversion = rep(NA, length(persons))
person_score_conversion = rep(NA, length(persons))
person_score_conversion
runApp()
person_score_conversion = rep(NA, length(persons))
person_score_baseline = matrix(,ncol = length(persons))
person_score_conversion = matrix(, nrow = nrow(X), ncol = length(persons))
person_score_baseline = rep(NA , length(persons))
person_score_conversion
person_score_baseline
runApp()
categories[input$Click.Counter - partA - 2]
runApp()
person_score_conversion
categories[input$Click.Counter - partA - 2]
categories[input$Click.Counter - partA - 2]
person_score_conversion[2,2]
persons[name][[1]]
runApp()
runApp()
runApp()
categories[input$Click.Counter - partA - 2] == "Baseline"
if (categories[input$Click.Counter - partA - 2] == "Baseline"){
try(person_score_baseline[persons[name][[1]]] <<- input$survey1)}
runApp()
source("Combination.R")
runApp()
runApp()
runApp()
runApp()
person_score_conversion
person_score_conversion[1,1]
persons
name
persons[name][[1]]
persons_score_conversion[2,persons[name][[1]]]
person_score_conversion[2,persons[name][[1]]]
runApp()
runApp()
person_score_conversion
runApp()
runApp()
runApp()
person_score_conversion[2,persons[name][[1]]]
person_score_conversion[2,persons[name][[1]]] <- 32
person_score_conversion
runApp()
runApp()
runApp()
NA + 1
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
get_wavs_experiment <- function(model, task, subtask, q, seed){
set.seed(seed)
if (q == "real_fake"){
list_of_fakes <- list.files(sprintf("www/%s/%s/%s", model, task, subtask))
fake <- sample(list_of_fakes, 1, F)
t <- task
s <- strsplit(subtask[1], "_")[[1]]
baseline_category <- paste(s[2],t[2], sep = "_")
list_of_reals <- list.files(sprintf('www/Baseline/Baseline/%s', baseline_category))
name <- sample(list_of_reals, 1)
real<-sample(list.files(paste("www", "Baseline", "Baseline", baseline_category, name, sep = "/")),1)
path_to_fake <- paste(model, task, subtask, fake, sep= "/")
path_to_real <- paste("Baseline", "Baseline", baseline_category, name, real, sep = "/")
return(c(path_to_real, path_to_fake))
}
else if (q == "similarity" & model != "Baseline"){
list_of_fakes <- list.files(sprintf("www/%s/%s/%s", model, task, subtask))
fakes <- sample(list_of_fakes, 2, F)
split <- strsplit(str_remove(fakes[1], ".wav"), "_")[[1]]
name <- split[length(split)]
list_of_reals <- list.files(sprintf("www/persons/%s", name))
real <- sample(list_of_reals, 1)
path_to_fake1 <- paste(model, task, subtask, fakes[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, fakes[2], sep= "/")
path_to_real <- paste("persons", name, real, sep = "/" )
return(c(path_to_fake1, path_to_real, path_to_fake2, name))
}
else if  (q == "similarity" & model == "Baseline"){
names <- sample(list.files(paste("www", model, task, subtask, sep = "/")),2, replace = F)
list_of_reals1 <- list.files(paste("www", model, task, subtask, names[1], sep = "/"))
list_of_reals2 <- list.files(paste("www", model, task, subtask, names[2], sep = "/"))
person1 <- sample(list_of_reals1, 2, F)
person2 <- sample(list_of_reals2, 1, F)
path_to_fake1 <- paste(model, task, subtask, names[1], person1[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, names[2], person2, sep= "/")
path_to_real <- paste(model, task, subtask, names[1], person1[2], sep = "/" )
# print(c(path_to_fake1, path_to_real, path_to_fake2, names[2]))
return(c(path_to_fake1, path_to_real, path_to_fake2, names[2]))
}
}
source("Combination.R")
source("Combination.R")
runApp()
get_wavs_experiment("AutoVC", "Danish", "Male_Male", "similarity", 2)
get_wavs_experiment("AutoVC", "Danish", "Male_Male", "similarity", 2)
get_wavs_experiment("AutoVC", "English", "Male_Male", "similarity", 2)
get_wavs_experiment("AutoVC", "English", "Male_Male", "real_fake", 2)
get_wavs_experiment <- function(model, task, subtask, q, seed){
set.seed(seed)
if (q == "real_fake"){
list_of_fakes <- list.files(sprintf("www/%s/%s/%s", model, task, subtask))
fake <- sample(list_of_fakes, 1, F)
t <- task
s <- strsplit(subtask[1], "_")[[1]]
baseline_category <- paste(s[2],t[2], sep = "_")
print(baseline_category)
list_of_reals <- list.files(sprintf('www/Baseline/Baseline/%s', baseline_category))
name <- sample(list_of_reals, 1)
real<-sample(list.files(paste("www", "Baseline", "Baseline", baseline_category, name, sep = "/")),1)
path_to_fake <- paste(model, task, subtask, fake, sep= "/")
path_to_real <- paste("Baseline", "Baseline", baseline_category, name, real, sep = "/")
return(c(path_to_real, path_to_fake))
}
else if (q == "similarity" & model != "Baseline"){
list_of_fakes <- list.files(sprintf("www/%s/%s/%s", model, task, subtask))
fakes <- sample(list_of_fakes, 2, F)
split <- strsplit(str_remove(fakes[1], ".wav"), "_")[[1]]
name <- split[length(split)]
list_of_reals <- list.files(sprintf("www/persons/%s", name))
real <- sample(list_of_reals, 1)
path_to_fake1 <- paste(model, task, subtask, fakes[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, fakes[2], sep= "/")
path_to_real <- paste("persons", name, real, sep = "/" )
return(c(path_to_fake1, path_to_real, path_to_fake2, name))
}
else if  (q == "similarity" & model == "Baseline"){
names <- sample(list.files(paste("www", model, task, subtask, sep = "/")),2, replace = F)
list_of_reals1 <- list.files(paste("www", model, task, subtask, names[1], sep = "/"))
list_of_reals2 <- list.files(paste("www", model, task, subtask, names[2], sep = "/"))
person1 <- sample(list_of_reals1, 2, F)
person2 <- sample(list_of_reals2, 1, F)
path_to_fake1 <- paste(model, task, subtask, names[1], person1[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, names[2], person2, sep= "/")
path_to_real <- paste(model, task, subtask, names[1], person1[2], sep = "/" )
# print(c(path_to_fake1, path_to_real, path_to_fake2, names[2]))
return(c(path_to_fake1, path_to_real, path_to_fake2, names[2]))
}
}
get_wavs_experiment("AutoVC", "English", "Male_Male", "real_fake", 2)
get_wavs_experiment <- function(model, task, subtask, q, seed){
set.seed(seed)
if (q == "real_fake"){
list_of_fakes <- list.files(sprintf("www/%s/%s/%s", model, task, subtask))
fake <- sample(list_of_fakes, 1, F)
t <- task
s <- strsplit(subtask[1], "_")[[1]]
baseline_category <- paste(s[2],t, sep = "_")
print(baseline_category)
list_of_reals <- list.files(sprintf('www/Baseline/Baseline/%s', baseline_category))
name <- sample(list_of_reals, 1)
real<-sample(list.files(paste("www", "Baseline", "Baseline", baseline_category, name, sep = "/")),1)
path_to_fake <- paste(model, task, subtask, fake, sep= "/")
path_to_real <- paste("Baseline", "Baseline", baseline_category, name, real, sep = "/")
return(c(path_to_real, path_to_fake))
}
else if (q == "similarity" & model != "Baseline"){
list_of_fakes <- list.files(sprintf("www/%s/%s/%s", model, task, subtask))
fakes <- sample(list_of_fakes, 2, F)
split <- strsplit(str_remove(fakes[1], ".wav"), "_")[[1]]
name <- split[length(split)]
list_of_reals <- list.files(sprintf("www/persons/%s", name))
real <- sample(list_of_reals, 1)
path_to_fake1 <- paste(model, task, subtask, fakes[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, fakes[2], sep= "/")
path_to_real <- paste("persons", name, real, sep = "/" )
return(c(path_to_fake1, path_to_real, path_to_fake2, name))
}
else if  (q == "similarity" & model == "Baseline"){
names <- sample(list.files(paste("www", model, task, subtask, sep = "/")),2, replace = F)
list_of_reals1 <- list.files(paste("www", model, task, subtask, names[1], sep = "/"))
list_of_reals2 <- list.files(paste("www", model, task, subtask, names[2], sep = "/"))
person1 <- sample(list_of_reals1, 2, F)
person2 <- sample(list_of_reals2, 1, F)
path_to_fake1 <- paste(model, task, subtask, names[1], person1[1], sep= "/")
path_to_fake2 <- paste(model, task, subtask, names[2], person2, sep= "/")
path_to_real <- paste(model, task, subtask, names[1], person1[2], sep = "/" )
# print(c(path_to_fake1, path_to_real, path_to_fake2, names[2]))
return(c(path_to_fake1, path_to_real, path_to_fake2, names[2]))
}
}
get_wavs_experiment("AutoVC", "English", "Male_Male", "real_fake", 2)
source("Combination.R")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('C:/Users/peter/OneDrive/Dokumenter/DTU/4. Semester/02466 - Fagprojekt KID/Deep_voice_conversion/Experiment/Survey-app/voice-conversion-survey/Combination.R')
source("Combination.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()

mutate(vocoder = ifelse((model == "Baseline") & (stringr::str_extract(conv_type, "^.{4}") == "Wave"), "WaveRNN", "World")) %>%
mutate(conv_type =  gsub("Wave", "", conv_type)) %>%
mutate(conv_type = gsub("World", "", conv_type)) %>%
Q <- Q %>% gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", "StarGAN")) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen"))
t <- S %>%
mutate(S30M = SDMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World")) %>%
mutate(vocoder = ifelse((model == "Baseline") & (stringr::str_extract(conv_type, "^.{4}") == "Wave"), "WaveRNN", "World")) %>%
mutate(conv_type =  gsub("Wave", "", conv_type)) %>%
mutate(conv_type = gsub("World", "", conv_type))
shiny::runApp()
source('D:/OneDrive/Dokumenter/DTU/4. Sem/Fagprojekt/Deep_voice_conversion/Experiment/Survey-app/stats/data.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(S)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('D:/OneDrive/Dokumenter/DTU/4. Sem/Fagprojekt/Deep_voice_conversion/Experiment/Survey-app/stats/data.R', echo=TRUE)
runApp()
bool("True")
"True"
as.logical("True")
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(googlesheets4)
library(googledrive)
options(gargle_oauth_cache = ".secrets")
library(lubridate)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
drive_auth(cache = ".secrets", email = "luke.leindance@gmail.com")
gs4_auth(token = drive_token())
ss = "https://docs.google.com/spreadsheets/d/1Y2Hu04dY-chxSPdVgcUefXSTs6zvG6lkzAFlWhICPJA/edit#gid=0"
S <- read_sheet(ss, sheet = "Similarity")
Q <- read_sheet(ss, sheet = "Quality")
Fool <- read_sheet(ss, sheet = "Fakeness")
P <- read_sheet(ss, sheet = "Persons")
PAV <- read_sheet(ss, sheet = "ConversionsAV")
PSG <- read_sheet(ss, sheet = "ConversionsSG")
n_participants <- nrow(S)
cat(paste0("There has been ", n_participants, " participants"))
transform_data <- function(data){
data %>%
mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World")) %>%
mutate(vocoder = ifelse((model == "Baseline") & (stringr::str_extract(conv_type, "^.{4}") == "Wave"), "WaveRNN", "World")) %>%
mutate(model = ifelse(model == "Baseline", ifelse(vocoder == "WaveRNN", "WaveRNN Baseline", "World Baseline"), model)) %>%
mutate(conv_type =  gsub("Wave", "", conv_type)) %>%
mutate(conv_type = gsub("World", "", conv_type)) %>%
mutate(experiment = ifelse(conv_type %in% c("10M", "20M", "30M"), "Amount", "Type")) %>%
mutate(conv_type = ifelse(conv_type == "10M", "10 min", ifelse(conv_type == "20M", "20 min", ifelse(conv_type == "30M", "30 min", conv_type))))
}
S_transformed <- transform_data(S)
Q_transformed <- transform_data(Q)
Fool_transformed <- transform_data(Fool) %>% filter(conv_type != "30 min")
ggplot(Q_transformed, aes(y = score, x = model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Quality") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
ggplot(Q_transformed, aes(y = score, x = model, fill= model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Quality") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
Q_transformed %>%
group_by(model, conv_type, experiment) %>%
summarise(score = mean(score)) %>%
ggplot(aes(y = score, x = model, fill= model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Quality") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
Q_transformed %>%
group_by(model) %>%
summarise(score = mean(score)) %>%
ggplot(aes(y = score, x = model, fill= model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Quality") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
library(gridExtra)
p3 <- Fool_transformed %>%
group_by(model) %>%
summarise(score = 1-mean(score)) %>%
ggplot(aes(y = score, x = model, fill= model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Quality") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
p1 <- S_transformed %>%
group_by(model) %>%
summarise(score = mean(score)) %>%
ggplot(aes(y = score, x = model, fill= model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Quality") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
p2 <- Q_transformed %>%
group_by(model) %>%
summarise(score = mean(score)) %>%
ggplot(aes(y = score, x = model, fill= model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Quality") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
p3 <- Fool_transformed %>%
group_by(model) %>%
summarise(score = 1-mean(score)) %>%
ggplot(aes(y = score, x = model, fill= model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Quality") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
grid.arrange(p1, p2, p3)
cowplot::plot_grid(p1, p2, p3)
p3 <- Fool_transformed %>%
group_by(model) %>%
summarise(score = 1-mean(score)) %>%
ggplot(aes(y = score, x = conv_type, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Fool test") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Percentage fooled")
cowplot::plot_grid(p1, p2, p3)
p3 <- Fool_transformed %>%
group_by(model) %>%
summarise(score = 1-mean(score)) %>%
ggplot(aes(y = score, x = model, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Fool test") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Percentage fooled")
cowplot::plot_grid(p1, p2, p3)
p1 <- S_transformed %>%
group_by(model) %>%
summarise(score = mean(score)) %>%
ggplot(aes(y = score, x = model, fill= model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Similarity") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
cowplot::plot_grid(p1, p2, p3)
t.test(x = S_transformed %>% filter(model == "StarGAN") %>% select(score), S_transformed %>% filter(model == "AutoVC") %>% select(score))
S_transformed %>% filter(model == "StarGAN") %>% select(score)
t.test(x = S_transformed %>% filter(model == "StarGAN") %>% pull(score), S_transformed %>% filter(model == "AutoVC") %>% pull(score))
t.test(x = Q_transformed %>% filter(model == "StarGAN") %>% pull(score), Q_transformed %>% filter(model == "AutoVC") %>% pull(score))
t.test(x = Fool_transformed %>% filter(model == "StarGAN") %>% pull(1-score), Fool_transformed %>% filter(model == "AutoVC") %>% pull(1-score))
t.test(x = Fool_transformed %>% filter(model == "StarGAN") %>% pull(score), Fool_transformed %>% filter(model == "AutoVC") %>% pull(score))
t.test(x = Fool_transformed %>% filter(model == "StarGAN") %>% 1-pull(score), Fool_transformed %>% filter(model == "AutoVC") %>% 1-pull(score))
t.test(x = Fool_transformed %>% filter(model == "StarGAN") %>% mutate(score = 1-score) %>% pull(score), Fool_transformed %>% filter(model == "AutoVC") %>% mutate(score = 1-score) %>% pull(score))
p3
S %>%
transform_data() %>%
ggplot(aes(x = conv_type, y = score)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Similarity") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
S %>%
transform_data() %>%
group_by(conv_type, model) %>%
summarise(score = mean(score)) %>%
ggplot(aes(x = conv_type, y = score)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Similarity") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
S %>%
transform_data() %>%
group_by(conv_type, model) %>%
summarise(score = mean(score)) %>%
ggplot(aes(x = conv_type, y = score, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Similarity") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
View(S)
p1 <- S_transformed %>%
group_by(model) %>%
summarise(score = mean(score)) %>%
ggplot(aes(y = score, x = model, fill= model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Similarity") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
p2 <- Q_transformed %>%
group_by(model) %>%
summarise(score = mean(score)) %>%
ggplot(aes(y = score, x = model, fill= model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Quality") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
p3 <- Fool_transformed %>%
group_by(model) %>%
summarise(score = 1-mean(score)) %>%
ggplot(aes(y = score, x = model, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Fool test") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Percentage fooled")
cowplot::plot_grid(p1, p2, p3)
data %>%
mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
select(-'20M', -'30M', -'10M') %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World")) %>%
mutate(vocoder = ifelse((model == "Baseline") & (stringr::str_extract(conv_type, "^.{4}") == "Wave"), "WaveRNN", "World")) %>%
mutate(model = ifelse(model == "Baseline", ifelse(vocoder == "WaveRNN", "WaveRNN Baseline", "World Baseline"), model)) %>%
mutate(conv_type =  gsub("Wave", "", conv_type)) %>%
mutate(conv_type = gsub("World", "", conv_type)) %>%
mutate(experiment = ifelse(conv_type %in% c("10M", "20M", "30M"), "Amount", "Type")) %>%
mutate(conv_type = ifelse(conv_type == "10M", "10 min", ifelse(conv_type == "20M", "20 min", ifelse(conv_type == "30M", "30 min", conv_type))))
View(S_transformed)
S %>%
transform_data() %>%
filter(experiment == "Type")
S %>%
transform_data() %>%
filter(experiment == "Type") %>%
group_by(conv_type, model) %>%
summarise(score = mean(score)) %>%
ggplot(aes(x = conv_type, y = score, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Similarity") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
S %>%
transform_data() %>%
filter(experiment == "Type") %>%
group_by(conv_type, model) %>%
summarise(score = mean(score)) %>%
ggplot(aes(x = conv_type, y = score, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Similarity") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score") +
legend("Model")
S %>%
transform_data() %>%
filter(experiment == "Type") %>%
group_by(conv_type, model) %>%
summarise(score = mean(score)) %>%
ggplot(aes(x = conv_type, y = score, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Similarity") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
Q %>%
transform_data() %>%
filter(experiment == "Type") %>%
group_by(conv_type, model) %>%
summarise(score = mean(score)) %>%
ggplot(aes(x = conv_type, y = score, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Quality") +
theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) +
xlab("Conversion type") +
ylab("Mean opinion score")
S %>%
transform_data() %>%
filter(experiment == "Type") %>%
ggplot(aes(x = conv_type, y = score)) %>%
geom_violin()
S %>%
transform_data() %>%
filter(experiment == "Type") %>%
ggplot(aes(x = conv_type, y = score)) +
geom_violin()
S %>%
transform_data() %>%
filter(experiment == "Type") %>%
ggplot(aes(x = conv_type, y = score)) +
geom_violin() +
facet_wrap(~model)
S %>%
transform_data() %>%
filter(experiment == "Type") %>%
ggplot(aes(x = conv_type, y = score)) +
geom_violin() +
facet_wrap(~vocoder)
transform_data <- function(data){
data %>%
mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World")) %>%
mutate(vocoder = ifelse((model == "Baseline") & (stringr::str_extract(conv_type, "^.{4}") == "Wave"), "WaveRNN", "World"))
S_transformed <- transform_data(S)
data %>%
mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World")) %>%
mutate(vocoder = ifelse((model == "Baseline") & (stringr::str_extract(conv_type, "^.{4}") == "Wave"), "WaveRNN", "World"), vocoder) %>%
mutate(model = ifelse(model == "Baseline", ifelse(vocoder == "WaveRNN", "WaveRNN Baseline", "World Baseline"), model)) %>%
mutate(conv_type =  gsub("Wave", "", conv_type)) %>%
mutate(conv_type = gsub("World", "", conv_type)) %>%
mutate(experiment = ifelse(conv_type %in% c("10M", "20M", "30M"), "Amount", "Type")) %>%
mutate(conv_type = ifelse(conv_type == "10M", "10 min", ifelse(conv_type == "20M", "20 min", ifelse(conv_type == "30M", "30 min", conv_type))))
S_transformed <- transform_data(S)
S %>% mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World"))
S %>% mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World")) %>%
view()
S %>% mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World")) %>%
View()
S %>% mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World")) %>% view()
S %>% mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World")) %>% View()
t <- S %>% mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World"))
t <- S %>% mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "Woirld"))
t <- S %>% mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World"))
t <- 1
t <- S %>% mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World"))
t <- S %>% mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World"))
t <- S %>% mutate(S30M = SDMM) %>%
mutate(A30M = ADMM) %>%
gather(key = "conv_type", value = "score", -c(Time, Zone, Age, Gender)) %>%
mutate(model = stringr::str_extract(conv_type, "^.{1}")) %>%
mutate(model = ifelse(model == "A", "AutoVC", ifelse(model == "S", "StarGAN", "Baseline"))) %>%
mutate(conv_type = gsub("^.{1}", "", conv_type)) %>%
mutate(score = as.integer(score)) %>%
mutate(Age = as.integer(Age)) %>%
mutate(Time = ymd_hms(Time, tz = "UTC") %>% with_tz(tzone = "Europe/Copenhagen")) %>%
mutate(vocoder = ifelse(model == "AutoVC", "WaveRNN", "World"))
